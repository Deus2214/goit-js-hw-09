{"mappings":"iiBAwDA,IAAAA,EAAAC,EAAA,SAwCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAAUC,GAC5BC,YAAW,WACLN,EACFI,EAAS,CAAEN,WAAUC,UAErBM,EAAS,CAAEP,WAAUC,S,GAEtBA,E,IAhDcQ,SAASC,cAAc,SAE/BC,iBAAiB,UAID,SAAAC,GAC3BA,EAAMC,iBAQkD,IANxD,IAAIC,EAAaC,OAAOH,EAAMI,cAAcf,MAAMgB,OAC5CC,EAAYH,OAAOH,EAAMI,cAAcG,KAAKF,OAC5CG,EAAkBL,OAAOH,EAAMI,cAAcK,OAAOJ,OAIjDK,EAAI,EAAGA,GAAKF,EAAiBE,GAAK,EAEkDvB,EAA7EuB,EAAGR,GACdS,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAEjBwB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,O,IAGjD4B,OAAM,SAAAL,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAElBwB,EAAA5B,GAAS6B,OAAOI,QACd,sBAAuCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,O,IAInDa,GAAcI,C","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03-promises.html і 03-promises.js.\n// Подивися демо - відео роботи генератора промісів.\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється,\n// і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n// який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт,\n// в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\nimport Notiflix from 'notiflix';\n\nconst formInputRef = document.querySelector('.form');\n\nformInputRef.addEventListener('submit', onSubmitButtonClick);\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount.\nfunction onSubmitButtonClick(event) {\n  event.preventDefault();\n\n  let firstDelay = Number(event.currentTarget.delay.value);\n  const stepDelay = Number(event.currentTarget.step.value);\n  const amountIteration = Number(event.currentTarget.amount.value);\n\n  // Під час кожного виклику передай їй номер промісу(position), що створюється,\n  // і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n  for (let i = 1; i <= amountIteration; i += 1) {\n    // Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n    createPromise(i, firstDelay)\n      .then(({ position, delay }) => {\n        // Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay} ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        // Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay} ms`\n        );\n      });\n\n    firstDelay += stepDelay;\n  }\n}\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n// який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт,\n// в якому будуть властивості position і delay зі значеннями однойменних параметрів.\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolved, rejected) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolved({ position, delay });\n      } else {\n        rejected({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolved","rejected","setTimeout","document","querySelector","addEventListener","event","preventDefault","firstDelay","Number","currentTarget","value","stepDelay","step","amountIteration","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.ae32d65e.js.map"}